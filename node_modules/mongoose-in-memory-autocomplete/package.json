{
  "_args": [
    [
      {
        "raw": "mongoose-in-memory-autocomplete",
        "scope": null,
        "escapedName": "mongoose-in-memory-autocomplete",
        "name": "mongoose-in-memory-autocomplete",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Horo/Code/NodeAngular/price-checker/price-checker-api"
    ]
  ],
  "_from": "mongoose-in-memory-autocomplete@latest",
  "_id": "mongoose-in-memory-autocomplete@1.2.3",
  "_inCache": true,
  "_location": "/mongoose-in-memory-autocomplete",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/mongoose-in-memory-autocomplete-1.2.3.tgz_1462334678326_0.9909823159687221"
  },
  "_npmUser": {
    "name": "guiomie",
    "email": "gui.ouellet@gmail.com"
  },
  "_npmVersion": "1.4.21",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "hooks": "0.2.1",
    "inherits": "2.0.3",
    "isarray": "1.0.0",
    "kerberos": "0.0.3",
    "regexp-clone": "0.0.1",
    "safe-buffer": "5.1.1",
    "string_decoder": "1.0.3",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "mongoose-in-memory-autocomplete",
    "scope": null,
    "escapedName": "mongoose-in-memory-autocomplete",
    "name": "mongoose-in-memory-autocomplete",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-in-memory-autocomplete/-/mongoose-in-memory-autocomplete-1.2.3.tgz",
  "_shasum": "e51d412a610092d0f125b3c6435aaaa186e6bc3f",
  "_shrinkwrap": null,
  "_spec": "mongoose-in-memory-autocomplete",
  "_where": "/Users/Horo/Code/NodeAngular/price-checker/price-checker-api",
  "dependencies": {
    "mongoose": "3.8.11"
  },
  "description": "This module will: * Fetch from mongodb the data you wish to autocomplete and insert this data in a prefix tree in memory. * Return all words starting with the requested string (autocomplete) * You can also bind data to a word inserted in the datastructure. (ex: an indexed id)",
  "devDependencies": {
    "rewire": "2.5.1"
  },
  "directories": {},
  "dist": {
    "shasum": "e51d412a610092d0f125b3c6435aaaa186e6bc3f",
    "tarball": "https://registry.npmjs.org/mongoose-in-memory-autocomplete/-/mongoose-in-memory-autocomplete-1.2.3.tgz"
  },
  "gitHead": "a8d316ac1f883a0da3272427095f85714b939cb6",
  "main": "./main.js",
  "maintainers": [
    {
      "name": "guiomie",
      "email": "gui.ouellet@gmail.com"
    }
  ],
  "name": "mongoose-in-memory-autocomplete",
  "optionalDependencies": {},
  "readme": "## A Mongoose in-memory autocomplete\n\nThis module will:\n* Fetch from mongodb the data you wish to autocomplete and insert this data in a prefix tree in memory.\n* Return all words starting with the requested string (autocomplete)\n* You can also bind data to a word inserted in the datastructure. (ex: an indexed id)\n\n## History\n\n1.1 -> Now supports case sensitivity. Ex: mar or Mar both would return Marcus\n\n## Test\n\n1. Have mongodb running\n2. Run tests (node ....js):\n\tautocomplete-test.js\n\tautocomplete-test-ignore-uppercase.js\n\tautocomplete-test-inverted-names.js\n\tfullname-autocomplete-test.js\n\n## Usage\n\n```\n\n//A Mongoose configuration is required\nvar membersSchema = Schema({\n\tfirstName : { type: String, required: true},\n\tlastName : { type: String, required: true }\n});\n\nvar MembersModel = mongoose.model('MembersModel', membersSchema);\n\n// Autocomplete configuration\nvar configuration = {\n\t//Fields being autocompleted, they will be concatenated\n\tautoCompleteFields : [ \"firstName\", \"lastName\"],\n\t//Returned data with autocompleted results\n\tdataFields: [\"_id\"],\n\t//Maximum number of results to return with an autocomplete request\n\tmaximumResults: 10,\n\t//MongoDB model (defined earlier) that will be used for autoCompleteFields and dataFields\n\tmodel: MembersModel\n}\n\n//initialization of AutoComplete Module\nvar myMembersAutoComplete = new AutoComplete(configuration, function(){\n  //any calls required after the initialization\n  console.log(\"Loaded \" + myMembersAutoComplete.getCacheSize() + \" words in auto complete\");\n});\n\n//Finding in the autocomplete\n//\n// Lets say we have in mongodb a document -> { firstName : \"James\", lastName: \"Green\", _id: \"535f06a28ddfa3880f000003\"}\n// getResults will return words -> [{\"word\": \"James Green\",\"data\": [\"535f06a28ddfa3880f000003\"]}]\n//\nmyMembersAutoComplete.getResults(\"Jam\", function(err, words){\n  if(err)\n    res.json(err);\n  else\n    res.json(words);\n});\n\n```\n",
  "readmeFilename": "README.md",
  "scripts": {},
  "version": "1.2.3"
}
